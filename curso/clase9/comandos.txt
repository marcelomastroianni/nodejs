Libros:
MongoDB definitive Guide.
MongoDB 50 tricks & tips

-----------------------------------------
IMPORTACION
-----------------------------------------
mongoimport --db test --collection products --file products.json  --jsonArray

mongoimport --db test --collection users --file users.json  --jsonArray
-----------------------------------------





1) REALIZAR LAS SIGUIENTES CONSULTAS EN LA CONSOLA DE MONGO

----------------------------------------------
a) obtener todos los productos cuyo precio este entre $20 y $20
----------------------------------------------

db.products.find({$and: [{price: {$gt:"$20"} }, {price: {$lt:"$30"} }]})

db.products.find({$and: [{price: {$gt:"$20"} }, {price: {$lt:"$30"} }]}).count

----------------------------------------------
b) Obtener los 10 productos con mayor descuento
----------------------------------------------

db.products.find({}).sort({desc:-1}).limit(10)

db.products.find({}).sort({desc:-1}).limit(10).pretty()

----------------------------------------------
c) obtener los 10 productos con mayor descuento ordenados por precio
----------------------------------------------

db.products.find({}).sort({desc:-1,price:1}).limit(10)

----------------------------------------------
d) agregar un descuento del 5% a todos los productos que tengan un precio superior a $90
----------------------------------------------

db.products.find({price: {$gt:"$90"}} )

/*Por defecto update actualiza un solo elemento, por eso hay que agregarle el parametro multi en true*/
/*db.products.update({Selector}, {Campos a modificar}, {parametro multiple})*/

db.products.update({price: {$gt:"$90"}}, {$set: {desc: 5}}, {multi: true})

----------------------------------------------
e) bajar a 15% el descuento de todos los productos que tengan un descuento superior
----------------------------------------------

db.products.find({desc: {$gt:15}})
db.products.update({desc: {$gt:15}}, {$set: {desc: 15}}, {multi: true})


------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------


2) REALIZAR LAS SIGUIENTES CONSULTAS EN LA CONSOLA DE MONGO USANDO AGGREGATION FRAMEWORK

----------------------------------------------
a) De todos los productos cuyo precio sea mayor a $80 calcular la cantidad de productos exixtentes para cada valor de descuento:
----------------------------------------------

ejemplo:

descuento: 10, cantidad de productos: 25,
descuento: 15, cantidad de productos: 9,
etc


db.products.aggregate()

/*Por ahora es el equivalente a hacer un find*/
db.products.aggregate({$match: {price: {$gt:"$80"} } } )

/*Lo siguiente es proyectar sobre estos lo que queremos devolver, en este caso el descuento*/
db.products.aggregate({$match: {price: {$gt:"$80"} } },
                      {$project: {desc:1,_id:0 } } )  /*En este caso queremos la descripcion, pero no el id*/


db.products.aggregate({$match: {price: {$gt:"$80"} } },
                      {$project: {desc:1,_id:0 } }, 
                      {$group: {_id:"$desc",count:{$sum:1 } } }) /*cambiamos el id por la descripcion y creamos un campo nuevo que es count que el valor es un operador que suma de a 1*/

----------------------------------------------
b) Obtener los 5 paises en con mayor cantidad de usuarios de genero femenino
----------------------------------------------


----------------------------------------------
c) Obtener los 5 paises con mayor cantidad de usuarios de genero masculino
----------------------------------------------


2) REALIZAR LAS SIGUIENTES CONSULTAS EN LA CONSOLA DE MONGO USANDO AGGREGATION FRAMEWORK

a) De todos los productos cuyo precio sea mayor a $80 calcular la cantidad de productos exixtentes para cada valor de descuento:

ejemplo:

descuento: 10, cantidad de productos: 25,
descuento: 15, cantidad de productos: 9,
etc

db.products.aggregate( 
	{ $match : { price : { $gt : "$80"  } } }, 
	{ $project : { desc : 1, _id : 0 } }, 
	{ $group : { _id : "$desc", count : { $sum : 1 } } }  
)

b) Obtener los 5 paises en con mayor cantidad de usuarios de genero femenino

db.users.aggregate(
	{ $match : { gender : "Female" } }, 
	{ $project : { _id:0, gender : 1, country : 1} }, 
	{ $group : { _id : "$country", female : { $sum : 1}  } }, 
	{ $sort : { female : -1 } }, 
	{ $limit : 5} 
)

c) Obtener los 5 paises con mayor cantidad de usuarios de genero masculino

db.users.aggregate(
	{ $match : { gender : "Male" } }, 
	{ $project : { _id:0, gender : 1, country : 1} }, 
	{ $group : { _id : "$country", male : { $sum : 1}  } }, 
	{ $sort : { male : -1 } }, 
	{ $limit : 5} 
)



------------------------------
Agregation Framework:
------------------------------
Por lo general no se puede hacer indices para la agregacion

Te da una serie de operaciones, que uno modifica hasta llegar al resultado que se esta esperando

$match: los datos que queremos matchear

$project: lo que queremos devolver para cada coincidencia.

$group: lo que queremos totalizar

$unwind:abrir un array y separarlo.

$sort: fase de ordenamiento

$limit: limitar una cantidad de elementos

$skip

