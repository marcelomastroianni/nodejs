
Para inicializar el servidor:
mongod

Para entrar en la consola para tirar comandos contra la base de datos:
mongo

Para importar datos a la base de datos desde archivos JSON:
mongoimport


Comandos dentro de Mongo

/*muestra todas las bases de datos*/
show databases

/*usa la base de datos test*/
use test

/*muestra todas las colecciones dentro de la base de datos*/
show collections

/*borra todos los documentos dentro de la colleccion de users*/
db.users.remove()

/*muestra la cantidad de objetos dentro de la coleccion users*/
db.users.count()

/*muestra todos los objetos dentro de la collecion de users*/
db.users.find()

/*Ver los indices creados de la coleccion*/
/*Ver informacion estadistica de una coleccion*/
/*Siempre hay por defecto un indice creado por id*/
> db.products.stats()
{
	"ns" : "test.products",
	"count" : 499,
	"size" : 43144,
	"avgObjSize" : 86.46092184368737,
	"storageSize" : 172032,
	"numExtents" : 3,
	"nindexes" : 1,
	"lastExtentSize" : 131072,
	"paddingFactor" : 1.0590000000000068,
	"systemFlags" : 1,
	"userFlags" : 0,
	"totalIndexSize" : 24528,
	"indexSizes" : {
		"_id_" : 24528
	},
	"ok" : 1
}

/*Borrar indices creados*/
db.products.dropIndex("price_1_desc_1")


db.products.find({desc:{$gt:10}}).explain()



> db.products.find({desc:{$gt:10}}).explain()
{
	"cursor" : "BasicCursor",
	"isMultiKey" : false,
	"n" : 216,
	"nscannedObjects" : 499,
	"nscanned" : 499,
	"nscannedObjectsAllPlans" : 499,
	"nscannedAllPlans" : 499,
	"scanAndOrder" : false,
	"indexOnly" : false,
	"nYields" : 0,
	"nChunkSkips" : 0,
	"millis" : 0,
	"indexBounds" : {
		
	},
	"server" : "jstraining-VM:27017"
}


/*
  Tiene que ver con si el motor interno de mongo hace busquedas en paralelo. Por ejemplo si hubiera varios indices.
	"nscannedObjectsAllPlans" : 499,
	"nscannedAllPlans" : 499,
	
	Si tuvo que trabajar para ordenar los datos despues de filtrarlos
		"scanAndOrder" : false,
		
	Si toda la informacion la pudo obtener del indice devuelve true
			"indexOnly" : false,
			
	Tiempo que tardo en milisegundos
	  "millis" : 0,
		
*/


db.products.find({desc:{$gt:10}}).sort({price:1}).explain()


db.products.createIndex({desc:1})

> db.products.stats()
{
	"ns" : "test.products",
	"count" : 499,
	"size" : 43144,
	"avgObjSize" : 86.46092184368737,
	"storageSize" : 172032,
	"numExtents" : 3,
	"nindexes" : 2,
	"lastExtentSize" : 131072,
	"paddingFactor" : 1.0590000000000068,
	"systemFlags" : 1,
	"userFlags" : 0,
	"totalIndexSize" : 49056,
	"indexSizes" : {
		"_id_" : 24528,
		"desc_1" : 24528
	},
	"ok" : 1
}

db.products.createIndex({price:1})

/* indice compuesto*/
db.products.createIndex({price:1,desc:1})

/*Se suele usar mucho de esta forma*/
db.products.createIndex({ORDER_INDEX,FILTER_INDEX})


El indice es util cuando el query me devolvio menos del 30 porciento de los datos totales
Cuando el query devuelve mas del 80 porciento de los datos, en estos casos es conveniente no tener indice. Por ejemplo en una consulta de logs no es conveniente tener indices.
En el indice tienen todos los datos completos de cada elemento de la coleccion.


Agregation Framework: implica una transformacion en los datos
por ejemplo group by, count, en sql.

tambien cuando la forma en q se quieren obtener los resultados es distinta a como estan los datos.
por ejemplo agregar campos nuevos, sumas restas, multiplicaciones.

en noSql se resuelve casi siempre con map y reduce.
en mongoDb tambien se soporta map y reduce, pero eso implica un escaneo de toda la coleccion.
Pero tenemos Agregation Framework, que es mas eficiente que map y reduce.
Agregation Framework trabaja como un pipeline donde se van transformando los datos, y el resultado de uno le pasa al siguiente y asi hasta llegar al resultado final


